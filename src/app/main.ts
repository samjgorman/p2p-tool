import { app, BrowserWindow, ipcMain } from "electron";
import signalhub from "signalhub";
import Peer from "simple-peer";
import wrtc from "wrtc";
import fs from "fs-extra";

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

//  This util appends to a file
async function writeToFS(message: string) {
  //  If the message is not null?
  const filename = "files/new.json"; //  make this a param
  if (message.length > 0) {
    fs.appendFile(filename, message + "\n", (err) => {
      if (err) {
        console.log("Error appending to file" + err);
      }
      // } else {
      //   // Get the file contents after the append operation
      //   console.log(
      //     '\nFile Contents of file after append:',
      //     fs.readFileSync('test.txt', 'utf8')
      //   )
      // }
    });
  }
}

type PeerSignal = {
  type: "signal";
  data: any;
};

const hub = signalhub("p2p-tool", ["http://localhost:8080/"]);
function connect(name: string, initiatorFlag: boolean) {
  const peer = new Peer({ initiator: initiatorFlag, wrtc: wrtc });

  peer.on("signal", function (data: object) {
    const payload: PeerSignal = {
      type: "signal",
      data: data,
    };

    const message = JSON.stringify(payload);
    console.log(name + "signalling");
    console.log(message);
    hub.broadcast("test", message);
  });

  if (!initiatorFlag) {
    const stream = hub.subscribe("test");
    console.log(name + "subscribed to updates");

    stream.on("data", (message: string) => {
      const result = JSON.parse(message).toString("utf8");
      if (result.type !== "signal") {
        console.log("wrong payload type");
        return;
      }
      console.log(name + "received data and signalling result data");
      console.log(result.data);

      peer.signal(result.data);
      stream.destroy();
    });
  }

  peer.on("connect", async () => {
    console.log("Connected!");

    //A chat session begins
  });

  //Received new message from sending peer
  peer.on("data", (data) => {
    console.log(name + ">", data.toString("utf8"));
  });
  peer.on("close", () => {
    console.log("close");
  });
  peer.on("error", (error) => {
    console.log("error", error);
  });
  peer.on("end", () => {
    console.log("Disconnected!");
  });
}

//  This function initiates a handshake to connect to a peer
async function initiateHandshake(
  name: string,
  initiator: boolean,
  recipient: string
) {
  const password = await new Promise<string>((resolve) => {
    const stream = hub.subscribe("my_channel"); //  Using name as a temp insecure channel
    stream.on("data", (message: string) => {
      console.log(message);
      if (message === recipient) {
        console.log("Password matches");
        stream.destroy();
        resolve(message);
      } else {
        console.error("wrong invite password");
      }
    });
  }).catch((err) => {
    console.error(err);
  });

  hub.broadcast("my_channel", recipient); // Channel name is name, password is recipient

  connect(name, initiator);
}

//  This function accepts a handshake to connect to a peer
async function acceptHandshake(
  name: string,
  initiator: boolean,
  recipient: string
) {
  hub.broadcast("my_channel", name);

  console.log("Sending invite response to", recipient);
  await new Promise<void>((resolve) => {
    const stream = hub.subscribe("my_channel");
    stream.on("data", (message: string) => {
      if (message === name) {
        stream.destroy();
        resolve();
      }
    });
  }).catch((err) => {
    console.error(err);
  });

  //  Exchange signal data over signalhub
  connect(name, initiator);
}

declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 1100,
    height: 700,
    backgroundColor: "#191622",
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

//  This begins the webRTC connection process
async function establishConnection(peerMetadata: string) {
  //  Unpack JSON string to an object
  const peerMetadataObj = JSON.parse(peerMetadata);
  const initiator = peerMetadataObj.initiator;
  const name = peerMetadataObj.user;
  const recipient = peerMetadataObj.recipient;

  // if (initiator) {
  //   initiateHandshake(name, initiator, recipient);
  // } else {
  //   acceptHandshake(name, initiator, recipient);
  // }

  connect(name, initiator);
}

async function registerListeners() {
  /**
   * This comes from bridge integration, check bridge.ts
   */

  //  writeToFS
  ipcMain.on("string_to_write", (_, message) => {
    writeToFS(message);
    console.log(message);
  });

  ipcMain.on("peer_metadata", (_, message) => {
    console.log(message);

    establishConnection(message);
  });
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app
  .on("ready", createWindow)
  .whenReady()
  .then(registerListeners)
  .catch((e) => console.error(e));

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
